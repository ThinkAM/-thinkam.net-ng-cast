"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vg_track_selector_1 = require("./vg-track-selector");
var vg_api_1 = require("../../core/services/vg-api");
describe('Track Selector control', function () {
    var vgTrackSelector;
    function createSubtitleTrack(label, srclang, isDefault) {
        var track = {};
        track.tagName = 'TRACK';
        track.kind = 'subtitles';
        track.label = label;
        track.srclang = srclang;
        track.default = isDefault;
        return track;
    }
    beforeEach(function () {
        var ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        vgTrackSelector = new vg_track_selector_1.VgTrackSelector(ref, new vg_api_1.VgAPI());
    });
    describe('onPlayerReady', function () {
        beforeEach(function () {
            vgTrackSelector.API.getMasterMedia = function () {
                return {
                    elem: {
                        children: [
                            createSubtitleTrack('English', 'en', false),
                            createSubtitleTrack('Español', 'es', true),
                            {},
                            {},
                            {}
                        ]
                    }
                };
            };
        });
        it('Should show subtitles tracks only', function () {
            vgTrackSelector.onPlayerReady();
            expect(vgTrackSelector.tracks.length).toBe(3); // 2 subs + 'Off'
        });
        it('Should set the selected option', function () {
            vgTrackSelector.onPlayerReady();
            expect(vgTrackSelector.tracks.filter(function (item) { return item.selected === true; })[0].label).toBe('Español');
        });
        it('Should have an Off option', function () {
            vgTrackSelector.onPlayerReady();
            expect(vgTrackSelector.tracks.filter(function (item) { return item.label === 'Off'; }).length).toBe(1);
        });
        it('Should set Off option as selected when there is no default track', function () {
            vgTrackSelector.API.getMasterMedia = function () {
                return {
                    elem: {
                        children: [
                            createSubtitleTrack('English', 'en', false),
                            createSubtitleTrack('Español', 'es', false)
                        ]
                    }
                };
            };
            vgTrackSelector.onPlayerReady();
            expect(vgTrackSelector.tracks.filter(function (item) { return item.selected === true; })[0].label).toBe('Off');
        });
    });
    describe('selectTrack', function () {
        beforeEach(function () {
            spyOn(vgTrackSelector.API, 'getMasterMedia').and.returnValue({
                elem: {
                    textTracks: [
                        { mode: 'showing', language: 'en' },
                        { mode: 'hidden', language: 'es' }
                    ]
                }
            });
        });
        it('Should select by track id', function () {
            vgTrackSelector.selectTrack('es');
            expect(vgTrackSelector.API.getMasterMedia().elem.textTracks.filter(function (item) { return item.mode === 'showing'; })[0].language).toBe('es');
        });
        it('Should select Off when track id is null', function () {
            vgTrackSelector.selectTrack(null);
            expect(vgTrackSelector.API.getMasterMedia().elem.textTracks.filter(function (item) { return item.mode === 'showing'; }).length).toBe(0);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,