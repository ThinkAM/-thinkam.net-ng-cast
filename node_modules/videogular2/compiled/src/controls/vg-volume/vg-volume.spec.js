"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var vg_volume_1 = require("./vg-volume");
var vg_api_1 = require("../../core/services/vg-api");
describe('Volume control', function () {
    var vgVol;
    var ref;
    var api;
    beforeEach(function () {
        ref = {
            nativeElement: {
                getAttribute: function (name) {
                    return name;
                }
            }
        };
        api = new vg_api_1.VgAPI();
        vgVol = new vg_volume_1.VgVolume(ref, api);
    });
    it('Should have isDragging set to false initially', function () {
        expect(vgVol.isDragging).toBe(false);
    });
    describe('onPlayerReady', function () {
        it('Should set vgFor', function () {
            vgVol.vgFor = 'test';
            vgVol.onPlayerReady();
            expect(vgVol.vgFor).toBe('test');
        });
        it('Should set target', function () {
            spyOn(api, 'getMediaById');
            vgVol.onPlayerReady();
            expect(api.getMediaById).toHaveBeenCalled();
        });
    });
    describe('onMouseDown', function () {
        it('Should set isDragging to true', function () {
            vgVol.onMouseDown({ clientX: 0 });
            expect(vgVol.isDragging).toBe(true);
        });
        it('Should set mouseDownPosX to event.x', function () {
            vgVol.onMouseDown({ clientX: 99 });
            expect(vgVol.mouseDownPosX).toBe(99);
        });
    });
    describe('onDrag', function () {
        beforeEach(function () {
            spyOn(vgVol, 'setVolume');
            spyOn(vgVol, 'calculateVolume');
        });
        it('Should call setVolume when dragging', function () {
            vgVol.isDragging = true;
            vgVol.onDrag({ clientX: 0 });
            expect(vgVol.setVolume).toHaveBeenCalled();
        });
        it('Should not call setVolume when not dragging', function () {
            vgVol.isDragging = false;
            vgVol.onDrag({ clientX: 0 });
            expect(vgVol.setVolume).not.toHaveBeenCalled();
        });
    });
    describe('onStopDrag', function () {
        beforeEach(function () {
            spyOn(vgVol, 'setVolume');
            spyOn(vgVol, 'calculateVolume');
        });
        it('Should toggle dragging value when dragging', function () {
            vgVol.isDragging = true;
            vgVol.mouseDownPosX = 0;
            vgVol.onStopDrag({ clientX: 0 });
            expect(vgVol.isDragging).toBe(false);
        });
        it('Should call setVolume when dragging and x positions match', function () {
            vgVol.isDragging = true;
            vgVol.mouseDownPosX = 0;
            vgVol.onStopDrag({ clientX: 0 });
            expect(vgVol.setVolume).toHaveBeenCalled();
        });
        it('Should not call setVolume when dragging but x positions dont match', function () {
            vgVol.isDragging = true;
            vgVol.mouseDownPosX = 1;
            vgVol.onStopDrag({ clientX: 0 });
            expect(vgVol.setVolume).not.toHaveBeenCalled();
        });
        it('Should not call setVolume when not dragging', function () {
            vgVol.isDragging = false;
            vgVol.mouseDownPosX = 0;
            vgVol.onStopDrag({ clientX: 0 });
            expect(vgVol.setVolume).not.toHaveBeenCalled();
        });
    });
    describe('calculateVolume', function () {
        it('Shoud calculate volume based on volumeBar position', function () {
            // mock volumeBarRef ViewChild
            vgVol.volumeBarRef = {
                nativeElement: {
                    getBoundingClientRect: function () {
                        return { left: 5, width: 100 };
                    }
                }
            };
            expect(vgVol.calculateVolume(10)).toBe(5);
        });
    });
    describe('setVolume', function () {
        it('Shoud convert volume to a value between 0 and 1', function () {
            vgVol.target = {
                volume: 3.33
            };
            vgVol.setVolume(50);
            expect(vgVol.target.volume).toBe(0.5);
            vgVol.setVolume(110);
            expect(vgVol.target.volume).toBe(1);
            vgVol.setVolume(-10);
            expect(vgVol.target.volume).toBe(0);
        });
    });
    describe('getVolume', function () {
        it('Shoud get target volume when target is set', function () {
            vgVol.target = {
                volume: 3.33
            };
            expect(vgVol.getVolume()).toBe(3.33);
        });
        it('Shoud get 0 volume when target is not set', function () {
            vgVol.target = undefined;
            expect(vgVol.getVolume()).toBe(0);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,